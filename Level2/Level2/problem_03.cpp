/*
  #. [ 쇠막대기 ]
  
  #. 문제 설명
     여러 개의 쇠막대기를 레이저로 절단하려고 합니다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 
     레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다. 쇠막대기와 레이저의 배치는 다음 조건을 만족합니다.

     - 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있습니다.
     - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓습니다.
     - 각 쇠막대기를 자르는 레이저는 적어도 하나 존재합니다.
     - 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않습니다.
     
     아래 그림은 위 조건을 만족하는 예를 보여줍니다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 
     점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향입니다.

  #. 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있습니다.

     (a) 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 '()'으로 표현합니다. 또한 모든 '()'는 반드시 레이저를 표현합니다.
     (b) 쇠막대기의 왼쪽 끝은 여는 괄호 '('로, 오른쪽 끝은 닫힌 괄호 ')'로 표현됩니다.
     
     위 예의 괄호 표현은 그림 위에 주어져 있습니다.
     쇠막대기는 레이저에 의해 몇 개의 조각으로 잘리는데, 
     위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘리고, 
     이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘립니다.
     
     쇠막대기와 레이저의 배치를 표현한 문자열 arrangement가 매개변수로 주어질 때, 
     잘린 쇠막대기 조각의 총 개수를 return 하도록 solution 함수를 작성해주세요.

  #. 제한사항
     - arrangement의 길이는 최대 100,000입니다.
     - arrangement의 여는 괄호와 닫는 괄호는 항상 쌍을 이룹니다.
     
     입출력 예
                arrangement	    return
     ()(((()())(())()))(())	        17
*/

#include <iostream>
#include <string>
#include <stack>
using namespace std;
/*
   #. 나의 접근법
      stack을 사용하여, while문을 사용하려 하였음.
      문제를 너무 어렵게 생각하였다....

      현상을 간단하게 코딩적으로 표현하는 것이 핵심

   #. 풀이.
      레이져 조건 : ()쌍이 반드시 인접해야 한다.

      1. arragement를 반복하면서 '('만나면 push한다.
      2. ')'를 만나면, pop()한다. 
         2.1 이 때, 바로 전 arrangement[i-1]이 '('였다면, 레이져이다.
             쇠막대의 개수 = answer + stack.size() 
             (스택 사이즈 만큼 더하는 것은, 레이져를 만나기 전에 쇠막대의 시작점들이 stack에 들어 있기 때문) 
         2.2 2.1에 해당하지 않으면, 쇠막대기가 끝나는 지점이다.
             쇠막대의 개수 = answer + 1 (1의 의미는 레이저로 인하여 1조각이 더생긴다.)
*/

int solution(string arrangement)
{
    int answer = 0;
    stack<char> s;

    for (int i = 0; i < arrangement.size(); i++)
    {
        if (arrangement[i] == '(')
            s.push(arrangement[i]);
        else
        {
            s.pop();
            if (arrangement[i - 1] = ')')
                answer = answer + s.size();

            else
                answer = answer + 1;
        }
    }
    return answer;
}

int main()
{
    string input = "()(((()())(())()))(())";
    
    cout << solution(input) << "\n";
    
    return 0;
}