/*
   #. [ 프로그래머스_등굣길 Level 3 ]

   #. 문제 설명
      계속되는 폭우로 일부 지역이 물에 잠겼습니다. 물에 잠기지 않은 지역을 통해 학교를 가려고 합니다. 
      집에서 학교까지 가는 길은 m x n 크기의 격자모양으로 나타낼 수 있습니다.
      아래 그림은 m = 4, n = 3 인 경우입니다.
      
      가장 왼쪽 위, 즉 집이 있는 곳의 좌표는 (1, 1)로 나타내고 가장 오른쪽 아래, 
      즉 학교가 있는 곳의 좌표는 (m, n)으로 나타냅니다.
      
      격자의 크기 m, n과 물이 잠긴 지역의 좌표를 담은 2차원 배열 puddles이 매개변수로 주어집니다. 
      집에서 학교까지 갈 수 있는 최단경로의 개수를 1,000,000,007로 나눈 나머지를 return 하도록 solution 함수를 작성해주세요.
      
  #. 제한사항
     - 격자의 크기 m, n은 1 이상 100 이하인 자연수입니다.
     - m과 n이 모두 1인 경우는 입력으로 주어지지 않습니다.
     - 물에 잠긴 지역은 0개 이상 10개 이하입니다.
     - 집과 학교가 물에 잠긴 경우는 입력으로 주어지지 않습니다.
     
  #. 입출력 예
     m	  n	   puddles	return
     4	  3	  [[2, 2]]	     4
*/
/*
  #. 풀이법.
     - 2차원 dp를 사용한 문제 이다.
     - 장애물을 -1로 표시하고 현재 위치까지의 최단거리의 경우의 수를 기록한다.

*/
#include <string>
#include <vector>
#include <iostream>
using namespace std;

int cost[101][101];
int dp[101][101];

int solution(int m, int n, vector<vector<int>> puddles) {
    int answer = 0;
    //
    //cost에서 puddles에 있는 좌표는 -1로 표시한다. 나머지는 0
    for (int i = 0; i < puddles.size(); i++)
        cost[puddles[i][1]][puddles[i][0]] = -1;

    //dp[1][0] 설정 dp[0][1]로 해도 된다.
    dp[1][0] = 1;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (cost[i][j] == -1)
                dp[i][j] = 0;
            else
            {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                dp[i][j] %= 1000000007;
            }
        }
    }
    answer = dp[n][m];
    //
    return answer;
}

int main()
{
    cout << solution(4, 3, { { 2,2 } }) << "\n";
    return 0;
}